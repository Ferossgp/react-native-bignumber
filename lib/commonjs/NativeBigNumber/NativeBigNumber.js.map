{"version":3,"sources":["NativeBigNumber.ts"],"names":["global","__BigNumberProxy","BigNumberModule","NativeModules","BigNumber","message","Platform","OS","ExpoConstants","NativeUnimoduleProxy","modulesConstants","ExponentConstants","appOwnership","Error","nativeCallSyncHook","install","result","proxy","NativeBigNumber"],"mappings":";;;;;;;AAAA;;AAYA;AACA,IAAIA,MAAM,CAACC,gBAAP,IAA2B,IAA/B,EAAqC;AACnC;AACA,QAAMC,eAAe,GAAGC,2BAAcC,SAAtC;;AACA,MAAIF,eAAe,IAAI,IAAvB,EAA6B;AAAA;;AAC3B,QAAIG,OAAO,GACT,6FADF;AAEAA,IAAAA,OAAO,IACL,wGADF;;AAEA,QAAIC,sBAASC,EAAT,KAAgB,KAAhB,IAAyBD,sBAASC,EAAT,KAAgB,OAA7C,EAAsD;AACpDF,MAAAA,OAAO,IAAI,4DAAX;AACD;;AACD,QAAIC,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7BF,MAAAA,OAAO,IAAI,iCAAX;AACD,KAV0B,CAW3B;;;AACA,UAAMG,aAAa,4BACjBL,2BAAcM,oBADG,oFACjB,sBAAoCC,gBADnB,2DACjB,uBAAsDC,iBADxD;;AAEA,QAAIH,aAAa,IAAI,IAArB,EAA2B;AACzB,UAAIA,aAAa,CAACI,YAAd,KAA+B,MAAnC,EAA2C;AACzC;AACA,cAAM,IAAIC,KAAJ,CACJ,oHADI,CAAN;AAGD,OALD,MAKO;AACL;AACAR,QAAAA,OAAO,IAAI,wCAAX;AACD;AACF;;AAEDA,IAAAA,OAAO,IAAI,oCAAX;AACA,UAAM,IAAIQ,KAAJ,CAAUR,OAAV,CAAN;AACD,GA/BkC,CAiCnC;;;AACA,MAAIL,MAAM,CAACc,kBAAP,IAA6B,IAA7B,IAAqCZ,eAAe,CAACa,OAAhB,IAA2B,IAApE,EAA0E;AACxE,UAAM,IAAIF,KAAJ,CACJ,+QADI,CAAN;AAGD,GAtCkC,CAwCnC;;;AACA,QAAMG,MAAM,GAAGd,eAAe,CAACa,OAAhB,EAAf;AACA,MAAIC,MAAM,KAAK,IAAf,EACE,MAAM,IAAIH,KAAJ,CACH,+JAA8JG,MAAO,EADlK,CAAN,CA3CiC,CA+CnC;;AACA,MAAIhB,MAAM,CAACC,gBAAP,IAA2B,IAA/B,EACE,MAAM,IAAIY,KAAJ,CACJ,uJADI,CAAN;AAGH;;AAED,MAAMI,KAAK,GAAGjB,MAAM,CAACC,gBAArB;AACO,MAAMiB,eAAe,GAAGD,KAAxB","sourcesContent":["import { NativeModules, Platform } from 'react-native';\n\ninterface NativeBigNumberSpec {\n  runAsync: () => Promise<number>;\n}\n\n// global func declaration for JSI functions\ndeclare global {\n  function nativeCallSyncHook(): unknown;\n  var __BigNumberProxy: object | undefined;\n}\n\n// Check if the constructor exists. If not, try installing the JSI bindings.\nif (global.__BigNumberProxy == null) {\n  // Get the native BigNumber ReactModule\n  const BigNumberModule = NativeModules.BigNumber;\n  if (BigNumberModule == null) {\n    let message =\n      'Failed to install react-native-bignumber: The native `BigNumber` Module could not be found.';\n    message +=\n      '\\n* Make sure react-native-bignumber is correctly autolinked (run `npx react-native config` to verify)';\n    if (Platform.OS === 'ios' || Platform.OS === 'macos') {\n      message += '\\n* Make sure you ran `pod install` in the ios/ directory.';\n    }\n    if (Platform.OS === 'android') {\n      message += '\\n* Make sure gradle is synced.';\n    }\n    // check if Expo\n    const ExpoConstants =\n      NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants;\n    if (ExpoConstants != null) {\n      if (ExpoConstants.appOwnership === 'expo') {\n        // We're running Expo Go\n        throw new Error(\n          'react-native-bignumber is not supported in Expo Go! Use EAS (`expo prebuild`) or eject to a bare workflow instead.'\n        );\n      } else {\n        // We're running Expo bare / standalone\n        message += '\\n* Make sure you ran `expo prebuild`.';\n      }\n    }\n\n    message += '\\n* Make sure you rebuilt the app.';\n    throw new Error(message);\n  }\n\n  // Check if we are running on-device (JSI)\n  if (global.nativeCallSyncHook == null || BigNumberModule.install == null) {\n    throw new Error(\n      'Failed to install react-native-bignumber: React Native is not running on-device. BigNumber can only be used when synchronous method invocations (JSI) are possible. If you are using a remote debugger (e.g. Chrome), switch to an on-device debugger (e.g. Flipper) instead.'\n    );\n  }\n\n  // Call the synchronous blocking install() function\n  const result = BigNumberModule.install();\n  if (result !== true)\n    throw new Error(\n      `Failed to install react-native-bignumber: The native BigNumber Module could not be installed! Looks like something went wrong when installing JSI bindings: ${result}`\n    );\n\n  // Check again if the constructor now exists. If not, throw an error.\n  if (global.__BigNumberProxy == null)\n    throw new Error(\n      'Failed to install react-native-bignumber, the native initializer function does not exist. Are you trying to use BigNumber from different JS Runtimes?'\n    );\n}\n\nconst proxy = global.__BigNumberProxy;\nexport const NativeBigNumber = proxy as any as NativeBigNumberSpec;\n"]}